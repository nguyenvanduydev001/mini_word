<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        LTsAAAAASUVORK5CYII=
</value>
  </data>
</root>